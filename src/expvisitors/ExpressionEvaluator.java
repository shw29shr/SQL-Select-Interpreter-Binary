package expvisitors;

import net.sf.jsqlparser.expression.Expression;
import expvisitors.SelectVisitor;

/**
 * Class which evaluates the given select and join expressions 
 * 
 * @author 
 * Saarthak Chandra - sc2776
 * Shweta Shrivastava - ss3646
 * Vikas P Nelamangala - vpn6
 *
 */
public class ExpressionEvaluator {
	
	/**
	 * This function is called in the Select Operator to check if the current tuple satisfies the select condition
	 * The Select Visitor carries with itself the information about the tuple and its schema
	 * @param selectCondition 
	 * 					Expression which represents the select condition
	 * @param selVisitor 
	 * 					Visitor generated by the SelectOperator which we use to evaluate result
	 * @return The result of the given expression evaluation - True or False
	 */
	public static boolean evaluateSelectExpression(Expression selectCondition, SelectVisitor selVisitor){
		selectCondition.accept(selVisitor);
		return selVisitor.getExpressionEvaluationResult();
	}
	
	
	/**
	 * This function is called in the Join Operator to evaluate the join of two tuples for given join condition
	 * and returns the expression evaluation result.
	 * The Join Visitor carries with itself the information about the two tuples and their schemas
	 * @param joinCondition
	 *            Expression which represents the condition on which the two tuples have to be tested
	 * @param joinVisitor
	 * 				Visitor generated by the JoinOperator which we use to evaluate result
	 * @return The result of the given expression evaluation - True or False
	 */
	public static boolean evaluateJoinExpression(Expression joinCondition, JoinVisitor joinVisitor) {
		joinCondition.accept(joinVisitor);
		return joinVisitor.getExpressionEvaluationResult();
	}

	

}
